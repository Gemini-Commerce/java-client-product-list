openapi: 3.0.1
info:
  contact:
    email: info@gemini-commerce.com
    name: Gemini Team
  license:
    name: Gemini fair use license
    url: https://gemini-commerce.com/api/fair-use-license
  title: Collection Service
  version: v1
servers:
- url: https://product-list.api.gogemini.io/
security:
- Authorization: []
tags:
- description: Collection Description
  externalDocs:
    url: https://gemini-commerce.com/api/productlist
  name: ProductList
paths:
  /productlist.ProductList/BulkUpdateProductListAssociations:
    post:
      operationId: ProductList_BulkUpdateProductListAssociations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistBulkUpdateProductListAssociationsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistBulkUpdateProductListAssociationsResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/CreateProductList:
    post:
      description: The CreateProductList endpoint is used to create a new collection
        of products within the system. This endpoint allows users to define the details
        and attributes of the collection.
      operationId: CreateProductList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistCreateProductListRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistCreateProductListResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Create Collection
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/CreateProductListAssociation:
    post:
      description: The CreateProductListAssociation endpoint is used to create an
        association between a collection and a product.
      operationId: CreateProductListAssociation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistCreateProductListAssociationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistCreateProductListAssociationResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Create Collection/Product Association
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/DeleteProductList:
    post:
      description: The DeleteProductList endpoint is used to delete an existing collection
        of products within the system.
      operationId: DeleteProductList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistDeleteProductListRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistDeleteProductListResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Delete Collection
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/DeleteProductListAssociation:
    post:
      description: The DeleteProductListAssociation endpoint is used to delete an
        association between a collection and a product.
      operationId: DeleteProductListAssociation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistDeleteProductListAssociationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistDeleteProductListAssociationResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Delete Collection/Product Association
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/GetProductListAssociationsByProductGrn:
    post:
      description: The GetProductListAssociationsByProductGrn endpoint is used to
        get the associations between a collection and a list of products by product
        GRN.
      operationId: GetProductListAssociationsByProductGrn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistGetProductListAssociationsByProductGrnRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistGetProductListAssociationsByProductGrnResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Get Collection/Product Associations by Product GRN
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/GetProductListByCode:
    post:
      description: The GetProductListByCode endpoint is used to retrieve an existing
        collection of products within the system.
      operationId: GetProductListByCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistGetProductListByCodeRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistGetProductListByCodeResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Get Collection by Code
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/GetProductListById:
    post:
      description: The GetProductListById endpoint is used to retrieve an existing
        collection of products within the system.
      operationId: GetProductListById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistGetProductListByIdRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistGetProductListByIdResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Get Collection by Id
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/GetProductListByUrlKey:
    post:
      description: The GetProductListByUrlKey endpoint is used to retrieve an existing
        collection of products within the system.
      operationId: GetProductListByUrlKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistGetProductListByUrlKeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistGetProductListByUrlKeyResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Get Collection by Url Key
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/GetProductListsCount:
    post:
      description: The GetProductListsCount endpoint is used to get the number of
        products associated with a collection.
      operationId: GetProductListsCount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistGetProductListsCountRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistGetProductListsCountResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Get Collection Product Count
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/ListProductListAssociations:
    post:
      description: The ListProductListAssociations endpoint is used to list the associations
        between a collection and a list of products.
      operationId: ListProductListAssociations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistListProductListAssociationsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistListProductListAssociationsResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: List Collection/Product Associations
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/ListProductLists:
    post:
      description: The ListProductLists endpoint is used to retrieve a list of existing
        collections of products within the system.
      operationId: ListProductLists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistListProductListsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistListProductListsResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: List Collections
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/SearchProductLists:
    post:
      description: The SearchProductLists endpoint is used to retrieve a list of existing
        collections of products within the system.
      operationId: SearchProductLists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistSearchProductListsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistSearchProductListsResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Search Collections
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/SearchProductListsByIds:
    post:
      description: The SearchProductListsByIds endpoint is used to retrieve a list
        of existing collections of products within the system.
      operationId: SearchProductListsByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistSearchProductListsByIdsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistSearchProductListsByIdsResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Search Collections by Ids
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/SetProductListAssociations:
    post:
      description: The SetProductListAssociations endpoint is used to set the associations
        between a collection and a list of products.
      operationId: SetProductListAssociations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistSetProductListAssociationsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistSetProductListAssociationsResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Set Collection/Product Associations
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /productlist.ProductList/UpdateProductList:
    post:
      description: The UpdateProductList endpoint is used to update an existing collection
        of products within the system.
      operationId: UpdateProductList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productlistUpdateProductListRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productlistUpdateProductListResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An internal error occurred is thrown when an incompatible payload
            is sent
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: Update Collection
      tags:
      - ProductList
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    OrderByDirection:
      default: DEFAULT
      enum:
      - DEFAULT
      - ASC
      - DESC
      type: string
    SearchProductListsRequestQuery:
      properties:
        attributes:
          items:
            type: string
          type: array
        value:
          type: string
      type: object
    SetProductListAssociationsRequestAssociation:
      properties:
        listId:
          type: string
        position:
          format: int32
          type: integer
        productGrn:
          type: string
      type: object
    productlistBulkUpdateProductListAssociationsRequest:
      properties:
        tenantId:
          type: string
        productListAssociations:
          items:
            $ref: '#/components/schemas/productlistBulkUpdateProductListAssociationsRequestProductListAssociation'
          type: array
      type: object
    productlistBulkUpdateProductListAssociationsRequestProductListAssociation:
      properties:
        id:
          type: string
        position:
          format: int32
          type: integer
      type: object
    productlistBulkUpdateProductListAssociationsResponse:
      type: object
    productlistCreateProductListAssociationRequest:
      properties:
        tenantId:
          type: string
        listId:
          type: string
        position:
          format: int32
          type: integer
        productGrn:
          type: string
      type: object
    productlistCreateProductListAssociationResponse:
      example:
        association:
          listId: listId
          productGrn: productGrn
          id: id
          position: 0
        errors:
        - code: code
          message: message
        - code: code
          message: message
      properties:
        association:
          $ref: '#/components/schemas/productlistProductListAssociation'
        errors:
          items:
            $ref: '#/components/schemas/productlistProductListAssociationError'
          type: array
      type: object
    productlistCreateProductListRequest:
      properties:
        tenantId:
          type: string
        code:
          type: string
        urlKey:
          $ref: '#/components/schemas/productlistLocalizedText'
        entityType:
          type: string
        entityCode:
          type: string
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/protobufAny'
          type: object
      type: object
    productlistCreateProductListResponse:
      example:
        list:
          countAssociations: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          code: code
          entityCode: entityCode
          entityType: entityType
          attributes:
            key:
              '@type': '@type'
          id: id
          urlKey:
            value:
              key: value
          updatedAt: 2000-01-23T04:56:07.000+00:00
        errors:
        - code: code
          message: message
        - code: code
          message: message
      properties:
        list:
          $ref: '#/components/schemas/productlistProductListEntity'
        errors:
          items:
            $ref: '#/components/schemas/productlistProductListError'
          type: array
      type: object
    productlistDeleteProductListAssociationRequest:
      properties:
        tenantId:
          type: string
        id:
          type: string
      type: object
    productlistDeleteProductListAssociationResponse:
      example:
        association:
          listId: listId
          productGrn: productGrn
          id: id
          position: 0
        errors:
        - code: code
          message: message
        - code: code
          message: message
      properties:
        association:
          $ref: '#/components/schemas/productlistProductListAssociation'
        errors:
          items:
            $ref: '#/components/schemas/productlistProductListAssociationError'
          type: array
      type: object
    productlistDeleteProductListRequest:
      properties:
        tenantId:
          type: string
        id:
          type: string
      type: object
    productlistDeleteProductListResponse:
      example:
        list:
          countAssociations: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          code: code
          entityCode: entityCode
          entityType: entityType
          attributes:
            key:
              '@type': '@type'
          id: id
          urlKey:
            value:
              key: value
          updatedAt: 2000-01-23T04:56:07.000+00:00
        errors:
        - code: code
          message: message
        - code: code
          message: message
      properties:
        list:
          $ref: '#/components/schemas/productlistProductListEntity'
        errors:
          items:
            $ref: '#/components/schemas/productlistProductListError'
          type: array
      type: object
    productlistGetProductListAssociationsByProductGrnRequest:
      properties:
        tenantId:
          type: string
        productGrn:
          type: string
      type: object
    productlistGetProductListAssociationsByProductGrnResponse:
      example:
        associations:
        - listId: listId
          productGrn: productGrn
          id: id
          position: 0
        - listId: listId
          productGrn: productGrn
          id: id
          position: 0
      properties:
        associations:
          items:
            $ref: '#/components/schemas/productlistProductListAssociation'
          type: array
      type: object
    productlistGetProductListByCodeRequest:
      properties:
        tenantId:
          type: string
        code:
          type: string
      type: object
    productlistGetProductListByCodeResponse:
      example:
        list:
          countAssociations: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          code: code
          entityCode: entityCode
          entityType: entityType
          attributes:
            key:
              '@type': '@type'
          id: id
          urlKey:
            value:
              key: value
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        list:
          $ref: '#/components/schemas/productlistProductListEntity'
      type: object
    productlistGetProductListByIdRequest:
      properties:
        tenantId:
          type: string
        id:
          type: string
      type: object
    productlistGetProductListByIdResponse:
      example:
        list:
          countAssociations: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          code: code
          entityCode: entityCode
          entityType: entityType
          attributes:
            key:
              '@type': '@type'
          id: id
          urlKey:
            value:
              key: value
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        list:
          $ref: '#/components/schemas/productlistProductListEntity'
      type: object
    productlistGetProductListByUrlKeyRequest:
      properties:
        tenantId:
          type: string
        urlKey:
          type: string
        locale:
          type: string
      type: object
    productlistGetProductListByUrlKeyResponse:
      example:
        list:
          countAssociations: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          code: code
          entityCode: entityCode
          entityType: entityType
          attributes:
            key:
              '@type': '@type'
          id: id
          urlKey:
            value:
              key: value
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        list:
          $ref: '#/components/schemas/productlistProductListEntity'
      type: object
    productlistGetProductListsCountRequest:
      properties:
        tenantId:
          type: string
      type: object
    productlistGetProductListsCountResponse:
      example:
        totalSize: 0
      properties:
        totalSize:
          format: int64
          type: integer
      type: object
    productlistListProductListAssociationsRequest:
      properties:
        tenantId:
          type: string
        listId:
          type: string
        productGrn:
          type: string
        pageSize:
          format: int64
          type: integer
        pageToken:
          type: string
        orderBy:
          items:
            $ref: '#/components/schemas/productlistOrderBy'
          type: array
      type: object
    productlistListProductListAssociationsResponse:
      example:
        associations:
        - listId: listId
          productGrn: productGrn
          id: id
          position: 0
        - listId: listId
          productGrn: productGrn
          id: id
          position: 0
        nextPageToken: nextPageToken
      properties:
        associations:
          items:
            $ref: '#/components/schemas/productlistProductListAssociation'
          type: array
        nextPageToken:
          type: string
      type: object
    productlistListProductListsRequest:
      properties:
        tenantId:
          type: string
        pageSize:
          format: int64
          type: integer
        pageToken:
          type: string
      type: object
    productlistListProductListsResponse:
      example:
        lists:
        - countAssociations: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          code: code
          entityCode: entityCode
          entityType: entityType
          attributes:
            key:
              '@type': '@type'
          id: id
          urlKey:
            value:
              key: value
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - countAssociations: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          code: code
          entityCode: entityCode
          entityType: entityType
          attributes:
            key:
              '@type': '@type'
          id: id
          urlKey:
            value:
              key: value
          updatedAt: 2000-01-23T04:56:07.000+00:00
        nextPageToken: nextPageToken
      properties:
        lists:
          items:
            $ref: '#/components/schemas/productlistProductListEntity'
          type: array
        nextPageToken:
          type: string
      type: object
    productlistLocalizedText:
      example:
        value:
          key: value
      properties:
        value:
          additionalProperties:
            type: string
          type: object
      type: object
    productlistOrderBy:
      properties:
        field:
          type: string
        direction:
          $ref: '#/components/schemas/OrderByDirection'
      type: object
    productlistProductListAssociation:
      example:
        listId: listId
        productGrn: productGrn
        id: id
        position: 0
      properties:
        id:
          type: string
        listId:
          type: string
        position:
          format: int32
          type: integer
        productGrn:
          type: string
      type: object
    productlistProductListAssociationError:
      example:
        code: code
        message: message
      properties:
        code:
          type: string
        message:
          type: string
      type: object
    productlistProductListEntity:
      example:
        countAssociations: 0
        createdAt: 2000-01-23T04:56:07.000+00:00
        code: code
        entityCode: entityCode
        entityType: entityType
        attributes:
          key:
            '@type': '@type'
        id: id
        urlKey:
          value:
            key: value
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: string
        code:
          type: string
        urlKey:
          $ref: '#/components/schemas/productlistLocalizedText'
        entityType:
          type: string
        entityCode:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/protobufAny'
          type: object
        countAssociations:
          format: int64
          type: integer
      type: object
    productlistProductListError:
      example:
        code: code
        message: message
      properties:
        code:
          type: string
        message:
          type: string
      type: object
    productlistSearchProductListsByIdsRequest:
      properties:
        tenantId:
          type: string
        ids:
          items:
            type: string
          type: array
        pageSize:
          format: int64
          type: integer
        pageNumber:
          format: int64
          type: integer
      type: object
    productlistSearchProductListsByIdsResponse:
      example:
        results:
        - countAssociations: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          code: code
          entityCode: entityCode
          entityType: entityType
          attributes:
            key:
              '@type': '@type'
          id: id
          urlKey:
            value:
              key: value
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - countAssociations: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          code: code
          entityCode: entityCode
          entityType: entityType
          attributes:
            key:
              '@type': '@type'
          id: id
          urlKey:
            value:
              key: value
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        results:
          items:
            $ref: '#/components/schemas/productlistProductListEntity'
          type: array
      type: object
    productlistSearchProductListsRequest:
      properties:
        tenantId:
          type: string
        query:
          $ref: '#/components/schemas/SearchProductListsRequestQuery'
        pageSize:
          format: int64
          type: integer
        pageNumber:
          format: int64
          type: integer
      type: object
    productlistSearchProductListsResponse:
      example:
        totalSize: 0
        results:
        - countAssociations: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          code: code
          entityCode: entityCode
          entityType: entityType
          attributes:
            key:
              '@type': '@type'
          id: id
          urlKey:
            value:
              key: value
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - countAssociations: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          code: code
          entityCode: entityCode
          entityType: entityType
          attributes:
            key:
              '@type': '@type'
          id: id
          urlKey:
            value:
              key: value
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        results:
          items:
            $ref: '#/components/schemas/productlistProductListEntity'
          type: array
        totalSize:
          format: int64
          type: integer
      type: object
    productlistSetProductListAssociationsRequest:
      properties:
        tenantId:
          type: string
        listId:
          type: string
        productGrn:
          type: string
        associations:
          items:
            $ref: '#/components/schemas/SetProductListAssociationsRequestAssociation'
          type: array
      type: object
    productlistSetProductListAssociationsResponse:
      example:
        associations:
        - listId: listId
          productGrn: productGrn
          id: id
          position: 0
        - listId: listId
          productGrn: productGrn
          id: id
          position: 0
        errors:
        - code: code
          message: message
        - code: code
          message: message
      properties:
        associations:
          items:
            $ref: '#/components/schemas/productlistProductListAssociation'
          type: array
        errors:
          items:
            $ref: '#/components/schemas/productlistProductListAssociationError'
          type: array
      type: object
    productlistUpdateProductListRequest:
      properties:
        tenantId:
          type: string
        id:
          type: string
        urlKey:
          $ref: '#/components/schemas/productlistLocalizedText'
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/protobufAny'
          type: object
        attributesMask:
          type: string
      type: object
    productlistUpdateProductListResponse:
      example:
        list:
          countAssociations: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          code: code
          entityCode: entityCode
          entityType: entityType
          attributes:
            key:
              '@type': '@type'
          id: id
          urlKey:
            value:
              key: value
          updatedAt: 2000-01-23T04:56:07.000+00:00
        errors:
        - code: code
          message: message
        - code: code
          message: message
      properties:
        list:
          $ref: '#/components/schemas/productlistProductListEntity'
        errors:
          items:
            $ref: '#/components/schemas/productlistProductListError'
          type: array
      type: object
    protobufAny:
      additionalProperties:
        type: object
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

        Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

        Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".


        JSON

        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      example:
        '@type': '@type'
      properties:
        '@type':
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
          type: string
      type: object
    rpcStatus:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        details:
          items:
            $ref: '#/components/schemas/protobufAny'
          type: array
      type: object
  securitySchemes:
    Authorization:
      in: header
      name: Authorization
      type: apiKey
    standardAuthorization:
      flows:
        implicit:
          scopes: {}
      type: oauth2
x-original-swagger-version: "2.0"

